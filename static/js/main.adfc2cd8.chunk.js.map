{"version":3,"sources":["components/Title.jsx","components/PomodoroTimer.jsx","components/Button.jsx","components/Background.jsx","App.js","index.js"],"names":["Title","props","className","class","title","PomodoroTimer","useState","displayMinutes","setMinutes","displaySeconds","setSeconds","displayTime","time","minutes","Math","floor","seconds","useEffect","interval","start","setInterval","clearInterval","handleTimerStatus","Button","onClick","val","name","Background","isStarted","setStarted","isBreak","setBreak","isStopped","setStopped","statusValue","setStatusValue","repeatTimer","setRepeatTimer","timerActive","setTimerActive","setTime","buttonText","setButtonText","status","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.adfc2cd8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../styles/colorStyles.css';\r\n\r\nfunction Title(props) {\r\n  return (\r\n    <div className={props.class}>\r\n      <h1>{props.title}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport '../styles/colorStyles.css';\r\n\r\nfunction PomodoroTimer(props) {\r\n  // Variables used to display minutes and seconds\r\n  const [displayMinutes, setMinutes] = useState(0);\r\n  const [displaySeconds, setSeconds] = useState(0);\r\n\r\n  // Method that computes given time value from minutes to seconds\r\n  // let timeInSeconds = (time) => {\r\n  //   return time * 60;\r\n  // };\r\n\r\n  // Method to calculate minutes and seconds for a passed time and set state values for timer\r\n  let displayTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n\r\n    setMinutes(minutes < 10 ? '0' + minutes : minutes);\r\n    setSeconds(seconds < 10 ? '0' + seconds : seconds);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Initialize starting display time\r\n    displayTime(props.time);\r\n    // Set time to be counted down when timer starts\r\n    let time = props.time;\r\n    let interval = null;\r\n    // When props.start is changed by the parent component, start the interval and thus the timer\r\n    if (props.start) {\r\n      interval = setInterval(() => {\r\n        time = time - 1;\r\n        displayTime(time);\r\n        // When the timer passes 0, stop the timer and clear it. Change status to stopped.\r\n        if (time <= 0) {\r\n          clearInterval(interval);\r\n          // To make sure timer doesn't count negative\r\n          //displayTime(0);\r\n          props.handleTimerStatus(3);\r\n        }\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [props]);\r\n\r\n  return (\r\n    <div className={props.class}>\r\n      <h1>\r\n        {displayMinutes}:{displaySeconds}\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PomodoroTimer;\r\n","import React from 'react';\r\n\r\nimport '../styles/buttonStyles.css';\r\nimport '../styles/colorStyles.css';\r\n\r\nfunction Button(props) {\r\n  return (\r\n    <div>\r\n      <button\r\n        className={props.class}\r\n        onClick={() => props.handleTimerStatus(props.val)}\r\n      >\r\n        {props.name}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React, { useState } from 'react';\r\nimport Title from './Title';\r\nimport PomodoroTimer from './PomodoroTimer';\r\nimport Button from './Button';\r\n\r\nimport '../styles/styles.css';\r\nimport '../styles/colorStyles.css';\r\n\r\nexport default function Background() {\r\n  // State variables to determine color styles\r\n  const [isStarted, setStarted] = useState(false);\r\n  const [isBreak, setBreak] = useState(false);\r\n  const [isStopped, setStopped] = useState(false);\r\n\r\n  // Value to determine timer status and used by handleTimerStatus method\r\n  const [statusValue, setStatusValue] = useState(1);\r\n\r\n  // Variable to determine when timer should start work timer or break timer\r\n  const [repeatTimer, setRepeatTimer] = useState(false);\r\n\r\n  // To be passed down to PomodoroTimer\r\n  const [timerActive, setTimerActive] = useState(false);\r\n  const [time, setTime] = useState(1500);\r\n\r\n  // Text to be passed to button for button text as props\r\n  const [buttonText, setButtonText] = useState('Start');\r\n\r\n  // Function to change state variables based on status of timer\r\n  let handleTimerStatus = (status) => {\r\n    switch (status) {\r\n      // Reset / Not Started\r\n      case 0:\r\n        setStarted(false);\r\n        setBreak(false);\r\n        setStopped(false);\r\n        setStatusValue(1);\r\n        setRepeatTimer(false);\r\n        setTimerActive(false);\r\n        setTime(1500);\r\n        setButtonText('Start');\r\n        break;\r\n      // Timer Started\r\n      case 1:\r\n        setStarted(true);\r\n        setBreak(false);\r\n        setStopped(false);\r\n        setStatusValue(0);\r\n        setRepeatTimer(false);\r\n        setTimerActive(true);\r\n        setTime(1500);\r\n        setButtonText('Reset');\r\n        break;\r\n      // Break Timer Started\r\n      case 2:\r\n        setStarted(false);\r\n        setBreak(true);\r\n        setStopped(false);\r\n        setStatusValue(0);\r\n        setRepeatTimer(true);\r\n        setTimerActive(true);\r\n        setTime(300);\r\n        setButtonText('Reset');\r\n        break;\r\n      // Timer Stopped\r\n      case 3:\r\n        setStarted(false);\r\n        setBreak(false);\r\n        setStopped(true);\r\n        setTime(0);\r\n        setTimerActive(false);\r\n        if (repeatTimer === true) {\r\n          setStatusValue(1);\r\n          setButtonText('Start');\r\n        } else {\r\n          setStatusValue(2);\r\n          setButtonText('Break');\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`container \r\n      ${isStarted ? 'blue-bg' : ''}\r\n      ${isBreak ? 'green-bg' : ''}\r\n      ${isStopped ? 'red-bg' : ''}`}\r\n    >\r\n      <Title\r\n        class={`\r\n        ${isStarted ? 'blue' : ''}\r\n        ${isBreak ? 'green' : ''}\r\n        ${isStopped ? 'red' : ''}`}\r\n        title=\"Pomodoro Timer\"\r\n      />\r\n      <PomodoroTimer\r\n        class={`\r\n        ${isStarted ? 'blue' : ''}\r\n        ${isBreak ? 'green' : ''}\r\n        ${isStopped ? 'red' : ''}`}\r\n        // Time given in seconds\r\n        time={time}\r\n        start={timerActive}\r\n        handleTimerStatus={handleTimerStatus}\r\n      />\r\n      <Button\r\n        class={`\r\n        ${isStarted ? 'blue' : ''}\r\n        ${isBreak ? 'green' : ''}\r\n        ${isStopped ? 'red' : ''}`}\r\n        name={buttonText}\r\n        handleTimerStatus={handleTimerStatus}\r\n        val={statusValue}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Background from './components/Background';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Background />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}